<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="dog" class="org.springframework.aop.bing.Dog">
        <property name="name" value="小黄"/>
    </bean>

    <bean id="cat" class="org.springframework.aop.bing.Cat">
        <property name="name" value="小花"/>
    </bean>

    <bean id="txAspect" class="org.springframework.aop.bing.aspect.TxAspect">
    </bean>

    <bean id="invokeTimeAspect"
          class="org.springframework.aop.bing.aspect.InvokeTimeAspect">
    </bean>

    <bean id="myMethodBeforeAdvice"
          class="org.springframework.aop.bing.interceptor.MyMethodBeforeAdvice"/>

    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <aop:config>
        <!-- 切点 1 -->
        <aop:pointcut id="catServicePointcut"
                      expression="execution(* org.springframework.aop.bing.service.CatService.*(..))"/>

        <!-- 切点 2 -->
        <aop:pointcut id="dogServicePointcut"
                      expression="execution(* org.springframework.aop.bing.service.DogService.*(..))"/>

        <!-- Advisor的另一种配置方式-->
        <aop:advisor advice-ref="myMethodBeforeAdvice" pointcut-ref="dogServicePointcut"/>

        <!-- aop:aspect 这里应该也是转换成多个 Advisor，类似上面这种，未来再验证 -->
        <!-- 第一个切面  -->
        <aop:aspect ref="txAspect">

            <!-- 内部也可以定义切点 -->
            <aop:pointcut id="xxx"
                          expression="execution(* org.springframework.aop.bing.service.CatService.*(..))"/>

            <!-- 通知 -->
            <!-- 每一个 通知 都会解析生成一个 AspectJPointcutAdvisor 对象, 最后转化为一个拦截器，拦截器再调用 txAspect 对应的方法 -->
            <!-- 之前 -->
            <aop:before method="begin" pointcut-ref="catServicePointcut"/>


            <!-- 正常结束之后 -->
            <aop:after-returning method="commit" pointcut-ref="dogServicePointcut"/>

            <!-- 抛异常 -->
            <!--<aop:after-throwing method="rollback" pointcut-ref="servicePointcut"-->
            <!--                    throwing="throwable"/>-->

            <!-- 相当于在finally里面 -->
            <!--<aop:after method="finallyInvoke" pointcut-ref="servicePointcut"/>-->

            <!-- 环绕通知  替代上面所有 -->
            <!--<aop:around method="around" pointcut-ref="servicePointcut"/>-->
        </aop:aspect>

        <!-- 第二个切面 -->
        <aop:aspect ref="invokeTimeAspect">
            <!-- 之前 -->
            <aop:before method="invokeStart" pointcut-ref="dogServicePointcut"/>

            <!-- 正常结束之后 -->
            <aop:after-returning method="invokeEnd" pointcut-ref="dogServicePointcut"/>

            <aop:after-returning method="invokeEnd" pointcut-ref="catServicePointcut"/>

        </aop:aspect>
    </aop:config>

</beans>